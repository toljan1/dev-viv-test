{"version":3,"file":"static/js/92.f00bb723.chunk.js","mappings":"0JAEO,IAAMA,EAAoB,SAACC,GAAgB,OAAKA,EAAMD,iBAAkB,EAClEE,EAAe,SAACD,GAAgB,OAAKA,EAAMC,YAAa,C,kICCxDC,EAAgB,WAC3B,IAAMC,GAAgBC,EAAAA,EAAAA,GAAeL,EAAAA,GAAmBM,MAClDC,GAAUF,EAAAA,EAAAA,GAAeH,EAAAA,GAAcA,aAE7C,OACEM,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAAD,UACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4BAGRC,EAAAA,EAAAA,KAAA,SAAAD,SACGE,OAAOC,QAAQR,GAAeS,KAAI,SAACC,GAClC,GAAIA,EAAS,KAAOP,EAClB,OAAO,KAGT,IAAMQ,GACHX,EAAcG,GAASS,OAASF,EAAS,GAAGE,MACzC,EACAC,KAAKC,OAAOd,EAAcG,GAASS,OAASF,EAAS,GAAGE,OACxDG,GACHf,EAAcG,GAASS,OAASF,EAAS,GAAGE,MACzCC,KAAKC,OAAOJ,EAAS,GAAGE,OAASZ,EAAcG,GAASS,OACxD,EAEN,OACER,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKF,KACLG,EAAAA,EAAAA,KAAA,MAAAD,SAAKM,KACLL,EAAAA,EAAAA,KAAA,MAAAD,SAAI,SACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAKU,KACLT,EAAAA,EAAAA,KAAA,MAAAD,SAAKK,EAAS,OALPA,EAAS,GAQtB,OAEFJ,EAAAA,EAAAA,KAAA,SAAAD,UACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6BAKd,ECrBA,GAAeW,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,IAAQ,MAA/B,EA1BwB,WACtB,IAAMC,GAAWC,EAAAA,EAAAA,KACXC,GAAcnB,EAAAA,EAAAA,GAAeL,EAAAA,GAAmBM,MAChDC,GAAUF,EAAAA,EAAAA,GAAeH,EAAAA,GAAcA,aACvCuB,EAAclB,EAAQmB,OAASnB,EAAU,SAE/C,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,UACEQ,MAAOS,EACPE,SAAU,SAACC,GAAE,OAAKN,GAASO,EAAAA,EAAAA,GAAgBD,EAAGE,cAAcd,OAAO,EAACP,SAAA,EAEpEC,EAAAA,EAAAA,KAAA,UAAQM,MAAM,SAAQP,SAAC,WACtBE,OAAOoB,KAAKP,GAAaX,KAAI,SAACC,GAAQ,OACrCJ,EAAAA,EAAAA,KAAA,UAAQM,MAAOF,EAASL,SACrBK,GAD2BA,EAErB,OAIZP,EAAQmB,QAAShB,EAAAA,EAAAA,KAACP,EAAa,IAAM,OAG5C,G","sources":["appStore/selectors.ts","components/currencyTable.tsx","components/currencyRate.tsx"],"sourcesContent":["import { RootState } from \"./RootState\";\n\nexport const availableCurrency = (state: RootState) => state.availableCurrency;\nexport const baseCurrency = (state: RootState) => state.baseCurrency;\n","import { useAppSelector } from \"../appStore/hooks\";\nimport { availableCurrency, baseCurrency } from \"../appStore/selectors\";\n\n// eslint-disable-next-line import/prefer-default-export, react/function-component-definition\nexport const CurrencyTable = () => {\n  const availableCurr = useAppSelector(availableCurrency).items;\n  const baseCur = useAppSelector(baseCurrency).baseCurrency;\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Base currency</th>\n          <th>Value</th>\n          <th>Equal</th>\n          <th>Value</th>\n          <th>Selected currency</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.entries(availableCurr).map((currency) => {\n          if (currency[0] === baseCur) {\n            return null;\n          }\n\n          const baseCurValue =\n            +availableCurr[baseCur].value < +currency[1].value\n              ? 1\n              : Math.round(+availableCurr[baseCur].value / +currency[1].value);\n          const selectedCurValue =\n            +availableCurr[baseCur].value < +currency[1].value\n              ? Math.round(+currency[1].value / +availableCurr[baseCur].value)\n              : 1;\n\n          return (\n            <tr key={currency[0]}>\n              <td>{baseCur}</td>\n              <td>{baseCurValue}</td>\n              <td>===</td>\n              <td>{selectedCurValue}</td>\n              <td>{currency[0]}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n      <tfoot>\n        <tr>\n          <th>Base currency</th>\n          <th>Value</th>\n          <th>Equal</th>\n          <th>Value</th>\n          <th>Selected currency</th>\n        </tr>\n      </tfoot>\n    </table>\n  );\n};\n","import React from \"react\";\nimport { compose } from \"@reduxjs/toolkit\";\nimport { connect } from \"react-redux\";\nimport { useAppDispatch, useAppSelector } from \"../appStore/hooks\";\nimport { availableCurrency, baseCurrency } from \"../appStore/selectors\";\nimport { setBaseCurrency } from \"../features/baseCurrencySlice\";\nimport { CurrencyTable } from \"./currencyTable\";\n\n// eslint-disable-next-line react/function-component-definition, import/prefer-default-export\nconst CurrencyChanger = () => {\n  const dispatch = useAppDispatch();\n  const avaibleCurr = useAppSelector(availableCurrency).items;\n  const baseCur = useAppSelector(baseCurrency).baseCurrency;\n  const selectValue = baseCur.length ? baseCur : \"Choose\";\n\n  return (\n    <div>\n      <select\n        value={selectValue}\n        onChange={(ev) => dispatch(setBaseCurrency(ev.currentTarget.value))}\n      >\n        <option value=\"Choose\">Choose</option>\n        {Object.keys(avaibleCurr).map((currency) => (\n          <option value={currency} key={currency}>\n            {currency}\n          </option>\n        ))}\n      </select>\n\n      {baseCur.length ? <CurrencyTable /> : null}\n    </div>\n  );\n};\n\n// eslint-disable-next-line prettier/prettier\nexport default compose(connect(null))(\n  CurrencyChanger,\n) as React.ComponentType<any>;\n"],"names":["availableCurrency","state","baseCurrency","CurrencyTable","availableCurr","useAppSelector","items","baseCur","_jsxs","children","_jsx","Object","entries","map","currency","baseCurValue","value","Math","round","selectedCurValue","compose","connect","dispatch","useAppDispatch","avaibleCurr","selectValue","length","onChange","ev","setBaseCurrency","currentTarget","keys"],"sourceRoot":""}